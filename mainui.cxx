// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "mainui.h"

Fl_Menu_Item MainUI::menu_[] = {
 {"&File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&New", 0x4006e,  (Fl_Callback*)cb_NewProject, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&Open...", 0x4006f,  (Fl_Callback*)cb_OpenProject, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&Save", 0x40073,  (Fl_Callback*)cb_SaveProject, (void*)(0), 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Save &As...", 0,  (Fl_Callback*)cb_SaveProject, (void*)(1), 128, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Export Animated &GIF...", 0,  (Fl_Callback*)cb_ExportGIF, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"E&xit", 0,  (Fl_Callback*)cb_CloseMenu, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Edit", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&Undo", 0x4007a,  (Fl_Callback*)cb_Undo, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&Copy Frame", 0x40063,  (Fl_Callback*)cb_CopyFrame, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&Paste Frame", 0x40076,  (Fl_Callback*)cb_PasteFrame, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"F&rame", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&New Frame", 0x8006e,  (Fl_Callback*)cb_NewFrameMenu, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"&Delete Frame", 0xffff,  (Fl_Callback*)cb_DeleteFrameMenu, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Jump to &First Frame", 0xff50,  (Fl_Callback*)cb_GotoFirst, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {"Jump to &Last Frame", 0xff57,  (Fl_Callback*)cb_GotoLast, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

#include <FL/Fl_Image.H>
static const unsigned char idata_brush_icon[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,91,110,
225,255,48,96,130,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,91,110,225,255,48,96,130,255,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
91,110,225,255,48,96,130,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,91,110,225,255,48,96,130,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,255,91,110,225,255,48,96,130,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,155,173,183,255,48,96,
130,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,102,57,49,255,102,57,49,255,102,57,49,255,69,40,60,255,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0};
static Fl_Image *image_brush_icon() {
  static Fl_Image *image = new Fl_RGB_Image(idata_brush_icon, 14, 14, 4, 0);
  return image;
}

static const unsigned char idata_eraser_icon[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,255,217,87,99,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,217,87,99,255,
217,87,99,255,217,87,99,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,217,87,99,255,217,87,99,255,217,87,99,255,217,
87,99,255,75,105,47,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,217,87,99,255,217,87,99,255,217,87,99,255,217,87,99,255,75,105,
47,255,75,105,47,255,217,87,99,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,255,217,87,99,255,217,87,99,255,217,87,99,255,217,87,99,255,75,105,47,255,
75,105,47,255,217,87,99,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,255,255,255,255,255,255,255,255,217,87,99,255,217,87,99,255,75,105,47,255,
75,105,47,255,217,87,99,255,0,0,0,255,172,50,50,255,0,0,0,255,0,0,0,0,0,0,0,0,
0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,75,
105,47,255,75,105,47,255,217,87,99,255,0,0,0,255,172,50,50,255,172,50,50,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,217,87,99,255,0,0,0,255,172,50,50,255,172,50,50,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,255,255,
255,255,255,255,255,255,255,255,255,255,255,0,0,0,255,172,50,50,255,172,50,50,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,
255,255,0,0,0,255,255,255,255,255,0,0,0,255,155,173,183,255,172,50,50,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,
255,255,255,255,0,0,0,255,155,173,183,255,155,173,183,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,
0,0,0,255,155,173,183,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_eraser_icon() {
  static Fl_Image *image = new Fl_RGB_Image(idata_eraser_icon, 14, 14, 4, 0);
  return image;
}

static const unsigned char idata_paintfill_icon[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,200,255,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,200,
255,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,171,218,218,255,0,0,0,255,255,255,255,255,200,255,255,255,200,
255,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
142,182,182,255,0,0,0,255,0,0,0,255,171,218,218,255,255,255,255,255,200,255,255,
255,200,255,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,142,182,
182,255,0,0,0,255,142,182,182,255,171,218,218,255,171,218,218,255,171,218,218,
255,255,255,255,255,200,255,255,255,200,255,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,0,255,142,182,182,255,142,182,182,255,142,182,182,255,171,
218,218,255,171,218,218,255,171,218,218,255,255,255,255,255,200,255,255,255,200,
255,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,142,182,182,
255,142,182,182,255,142,182,182,255,171,218,218,255,171,218,218,255,171,218,218,
255,255,255,255,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
0,0,0,0,255,142,182,182,255,142,182,182,255,142,182,182,255,171,218,218,255,
171,218,218,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,255,142,182,182,255,142,182,182,255,142,182,182,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,142,182,182,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_paintfill_icon() {
  static Fl_Image *image = new Fl_RGB_Image(idata_paintfill_icon, 14, 14, 4, 0);
  return image;
}

static const unsigned char idata_round_brush[] =
{0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0};
static Fl_Image *image_round_brush() {
  static Fl_Image *image = new Fl_RGB_Image(idata_round_brush, 8, 8, 4, 0);
  return image;
}

static const unsigned char idata_square_brush[] =
{0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255};
static Fl_Image *image_square_brush() {
  static Fl_Image *image = new Fl_RGB_Image(idata_square_brush, 8, 8, 4, 0);
  return image;
}

static const unsigned char idata_pattern_normal[] =
{0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,
0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,
0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,
255,0,0,0,255};
static Fl_Image *image_pattern_normal() {
  static Fl_Image *image = new Fl_RGB_Image(idata_pattern_normal, 8, 8, 4, 0);
  return image;
}

static const unsigned char idata_pattern_50[] =
{0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,
0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,
0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,
0,0,0,0,0,255,0,0,0,0,0,0,0,255};
static Fl_Image *image_pattern_50() {
  static Fl_Image *image = new Fl_RGB_Image(idata_pattern_50, 8, 8, 4, 0);
  return image;
}

static const unsigned char idata_pattern_25[] =
{0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,
0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0};
static Fl_Image *image_pattern_25() {
  static Fl_Image *image = new Fl_RGB_Image(idata_pattern_25, 8, 8, 4, 0);
  return image;
}

Fl_Menu_Item MainUI::menu_patternChoice[] = {
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0, 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

static const unsigned char idata_onionskin_prev[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,217,160,102,255,217,160,102,255,
0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,255,217,160,102,255,238,195,154,255,217,160,102,255,
238,195,154,255,217,160,102,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,238,195,154,255,217,160,102,255,238,
195,154,255,217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,238,
195,154,255,217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,217,
160,102,255,238,195,154,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,238,195,154,255,217,160,102,255,238,195,154,255,217,
160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,0,0,0,255,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,238,195,154,
255,217,160,102,255,217,160,102,255,217,160,102,255,238,195,154,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_onionskin_prev() {
  static Fl_Image *image = new Fl_RGB_Image(idata_onionskin_prev, 16, 12, 4, 0);
  return image;
}

static const unsigned char idata_onionskin_next[] =
{0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,
0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,217,160,102,255,217,160,102,255,0,
0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,238,195,154,255,217,160,102,255,
238,195,154,255,217,160,102,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,
0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,238,195,154,255,217,160,102,255,
238,195,154,255,217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,
0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
238,195,154,255,217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,
217,160,102,255,238,195,154,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,255,238,195,154,255,217,160,102,255,238,195,154,255,
217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,238,195,
154,255,217,160,102,255,217,160,102,255,217,160,102,255,238,195,154,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_onionskin_next() {
  static Fl_Image *image = new Fl_RGB_Image(idata_onionskin_next, 16, 12, 4, 0);
  return image;
}

static const unsigned char idata_onionskin_ref[] =
{0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,0,0,0,255,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,217,160,102,255,217,160,102,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,0,
0,255,0,0,0,0,0,0,0,0,0,0,0,255,217,160,102,255,238,195,154,255,217,160,102,
255,238,195,154,255,217,160,102,255,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,255,238,195,154,255,217,160,102,
255,238,195,154,255,217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,
255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
238,195,154,255,217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,
217,160,102,255,238,195,154,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,255,238,195,154,255,217,160,102,255,238,195,154,255,
217,160,102,255,238,195,154,255,217,160,102,255,238,195,154,255,0,0,0,255,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,238,195,
154,255,217,160,102,255,217,160,102,255,217,160,102,255,238,195,154,255,0,0,0,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_Image *image_onionskin_ref() {
  static Fl_Image *image = new Fl_RGB_Image(idata_onionskin_ref, 16, 12, 4, 0);
  return image;
}
MainUI::MainUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _MainUI();
}

MainUI::MainUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _MainUI();
}

MainUI::MainUI()
  : Fl_Double_Window(0, 0, 800, 600, "Flopbook") {
  clear_flag(16);
  _MainUI();
}

void MainUI::_MainUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->callback((Fl_Callback*)cb_CloseCallback, (void*)(0));
this->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
this->when(FL_WHEN_RELEASE);
{ Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 800, 20);
  o->menu(menu_);
} // Fl_Menu_Bar* o
{ Fl_Group* o = new Fl_Group(0, 20, 63, 530);
  { brushTool = new Fl_Button(5, 25, 25, 25);
    brushTool->tooltip("Brush");
    brushTool->type(102);
    brushTool->box(FL_THIN_UP_BOX);
    brushTool->value(1);
    brushTool->image( image_brush_icon() );
    brushTool->callback((Fl_Callback*)cb_ToolButton, (void*)(0));
  } // Fl_Button* brushTool
  { eraseTool = new Fl_Button(30, 25, 25, 25);
    eraseTool->tooltip("Eraser");
    eraseTool->type(102);
    eraseTool->box(FL_THIN_UP_BOX);
    eraseTool->image( image_eraser_icon() );
    eraseTool->callback((Fl_Callback*)cb_ToolButton, (void*)(1));
  } // Fl_Button* eraseTool
  { fillTool = new Fl_Button(5, 50, 25, 25);
    fillTool->tooltip("Fill");
    fillTool->type(102);
    fillTool->box(FL_THIN_UP_BOX);
    fillTool->image( image_paintfill_icon() );
    fillTool->callback((Fl_Callback*)cb_ToolButton, (void*)(2));
  } // Fl_Button* fillTool
  { Fl_Box* o = new Fl_Box(2, 170, 53, 16, "Zoom");
    o->labelsize(12);
    o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
  } // Fl_Box* o
  { Fl_Group* o = new Fl_Group(5, 186, 50, 30);
    { zoomRadio[0] = new Fl_Button(5, 186, 25, 15, "1x");
      zoomRadio[0]->type(102);
      zoomRadio[0]->box(FL_THIN_UP_BOX);
      zoomRadio[0]->shortcut(0x80031);
      zoomRadio[0]->value(1);
      zoomRadio[0]->labelsize(10);
      zoomRadio[0]->callback((Fl_Callback*)cb_Zoom, (void*)(0));
    } // Fl_Button* zoomRadio[0]
    { zoomRadio[1] = new Fl_Button(30, 186, 25, 15, "2x");
      zoomRadio[1]->type(102);
      zoomRadio[1]->box(FL_THIN_UP_BOX);
      zoomRadio[1]->shortcut(0x80032);
      zoomRadio[1]->labelsize(10);
      zoomRadio[1]->callback((Fl_Callback*)cb_Zoom, (void*)(1));
    } // Fl_Button* zoomRadio[1]
    { zoomRadio[2] = new Fl_Button(5, 201, 25, 15, "4x");
      zoomRadio[2]->type(102);
      zoomRadio[2]->box(FL_THIN_UP_BOX);
      zoomRadio[2]->shortcut(0x80033);
      zoomRadio[2]->labelsize(10);
      zoomRadio[2]->callback((Fl_Callback*)cb_Zoom, (void*)(2));
    } // Fl_Button* zoomRadio[2]
    { zoomRadio[3] = new Fl_Button(30, 201, 25, 15, "8x");
      zoomRadio[3]->type(102);
      zoomRadio[3]->box(FL_THIN_UP_BOX);
      zoomRadio[3]->shortcut(0x80034);
      zoomRadio[3]->labelsize(10);
      zoomRadio[3]->callback((Fl_Callback*)cb_Zoom, (void*)(3));
    } // Fl_Button* zoomRadio[3]
    o->end();
  } // Fl_Group* o
  { brushSize = new Fl_Spinner(5, 95, 50, 21, "Size");
    brushSize->tooltip("Brush size in pixels.");
    brushSize->labelsize(12);
    brushSize->maximum(12);
    brushSize->value(4);
    brushSize->textsize(12);
    brushSize->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  } // Fl_Spinner* brushSize
  { Fl_Group* o = new Fl_Group(5, 115, 50, 15);
    { brushShape[0] = new Fl_Button(5, 115, 25, 15);
      brushShape[0]->tooltip("Round brush.");
      brushShape[0]->type(102);
      brushShape[0]->box(FL_THIN_UP_BOX);
      brushShape[0]->value(1);
      brushShape[0]->image( image_round_brush() );
      brushShape[0]->labelsize(12);
    } // Fl_Button* brushShape[0]
    { brushShape[1] = new Fl_Button(30, 115, 25, 15);
      brushShape[1]->tooltip("Square brush.");
      brushShape[1]->type(102);
      brushShape[1]->box(FL_THIN_UP_BOX);
      brushShape[1]->image( image_square_brush() );
      brushShape[1]->labelsize(12);
    } // Fl_Button* brushShape[1]
    o->end();
  } // Fl_Group* o
  { patternInvert = new Fl_Button(40, 150, 15, 15, "R");
    patternInvert->tooltip("Invert pattern.");
    patternInvert->type(1);
    patternInvert->box(FL_THIN_UP_BOX);
    patternInvert->labelfont(1);
    patternInvert->labelsize(12);
  } // Fl_Button* patternInvert
  { patternChoice = new Fl_Choice(5, 150, 35, 15, "Pattern");
    patternChoice->tooltip("Brush pattern.");
    patternChoice->down_box(FL_BORDER_BOX);
    patternChoice->labelsize(12);
    patternChoice->textsize(12);
    patternChoice->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    { Fl_Menu_Item* o = &menu_patternChoice[0];
    o->image( image_pattern_normal() );
    }
    { Fl_Menu_Item* o = &menu_patternChoice[1];
    o->image( image_pattern_50() );
    }
    { Fl_Menu_Item* o = &menu_patternChoice[2];
    o->image( image_pattern_25() );
    }
    patternChoice->menu(menu_patternChoice);
  } // Fl_Choice* patternChoice
  { Fl_Group* o = new Fl_Group(5, 525, 50, 15);
    o->end();
    Fl_Group::current()->resizable(o);
  } // Fl_Group* o
  o->end();
} // Fl_Group* o
{ canvasArea = new Fl_Scroll(63, 20, 737, 530);
  canvasArea->box(FL_DOWN_BOX);
  canvasArea->labelfont(1);
  canvasArea->end();
  Fl_Group::current()->resizable(canvasArea);
} // Fl_Scroll* canvasArea
{ Fl_Group* o = new Fl_Group(0, 550, 800, 50);
  { Fl_Group* o = new Fl_Group(500, 555, 20, 40);
    o->end();
    Fl_Group::current()->resizable(o);
  } // Fl_Group* o
  { frameCtrlGroup = new Fl_Group(695, 555, 100, 40);
    frameCtrlGroup->deactivate();
    { frameCounter = new Fl_Counter(745, 555, 50, 20, "Frame");
      frameCounter->type(1);
      frameCounter->labelsize(12);
      frameCounter->minimum(0);
      frameCounter->maximum(100);
      frameCounter->step(1);
      frameCounter->textfont(1);
      frameCounter->textsize(12);
      frameCounter->callback((Fl_Callback*)cb_FrameCounter);
      frameCounter->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* frameCounter
    { Fl_Button* o = new Fl_Button(695, 575, 50, 20, "New");
      o->tooltip("Insert a new frame after the current frame.");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_NewFrame);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(745, 575, 50, 20, "Delete");
      o->tooltip("Delete the current frame.");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_DeleteFrame);
    } // Fl_Button* o
    frameCtrlGroup->end();
  } // Fl_Group* frameCtrlGroup
  { Fl_Group* o = new Fl_Group(524, 575, 74, 16);
    { rateMode[0] = new Fl_Round_Button(524, 576, 34, 15, "ms");
      rateMode[0]->tooltip("Specify animation rate in milliseconds.");
      rateMode[0]->type(102);
      rateMode[0]->down_box(FL_ROUND_DOWN_BOX);
      rateMode[0]->labelsize(12);
    } // Fl_Round_Button* rateMode[0]
    { rateMode[1] = new Fl_Round_Button(558, 576, 40, 15, "fps");
      rateMode[1]->tooltip("Specify animation rate in frames per second.");
      rateMode[1]->type(102);
      rateMode[1]->down_box(FL_ROUND_DOWN_BOX);
      rateMode[1]->value(1);
      rateMode[1]->labelsize(12);
    } // Fl_Round_Button* rateMode[1]
    o->end();
  } // Fl_Group* o
  { rateValue = new Fl_Value_Input(523, 555, 75, 21, "Rate");
    rateValue->tooltip("Animation rate in milliseconds or frames per second depending on the rate set\
ting.");
    rateValue->labelsize(12);
    rateValue->minimum(1);
    rateValue->maximum(1000);
    rateValue->step(1);
    rateValue->value(15);
    rateValue->textsize(12);
  } // Fl_Value_Input* rateValue
  { Fl_Button* o = new Fl_Button(602, 555, 29, 20, "@>");
    o->tooltip("Play animation.");
    o->callback((Fl_Callback*)cb_PlayAnim);
  } // Fl_Button* o
  { Fl_Button* o = new Fl_Button(602, 575, 29, 20, "@square");
    o->tooltip("Stop animation.");
    o->callback((Fl_Callback*)cb_StopAnim);
  } // Fl_Button* o
  { paletteBox = new Fl_ColorPalette(63, 555, 160, 40);
    paletteBox->tooltip("Color palette, double-click to edit colors.");
    paletteBox->box(FL_NO_BOX);
    paletteBox->color(FL_BACKGROUND_COLOR);
    paletteBox->selection_color(FL_BACKGROUND_COLOR);
    paletteBox->labeltype(FL_NORMAL_LABEL);
    paletteBox->labelfont(0);
    paletteBox->labelsize(14);
    paletteBox->labelcolor(FL_FOREGROUND_COLOR);
    paletteBox->callback((Fl_Callback*)cb_PaletteBox);
    paletteBox->align(Fl_Align(FL_ALIGN_CENTER));
    paletteBox->when(FL_WHEN_RELEASE);
  } // Fl_ColorPalette* paletteBox
  { onionPrevToggle = new Fl_Button(663, 555, 27, 20);
    onionPrevToggle->tooltip("Onionskin from previous frame.");
    onionPrevToggle->type(1);
    onionPrevToggle->image( image_onionskin_prev() );
    onionPrevToggle->callback((Fl_Callback*)cb_OnionToggle);
  } // Fl_Button* onionPrevToggle
  { onionNextToggle = new Fl_Button(663, 575, 27, 20);
    onionNextToggle->tooltip("Onionskin from next frame.");
    onionNextToggle->type(1);
    onionNextToggle->image( image_onionskin_next() );
    onionNextToggle->callback((Fl_Callback*)cb_OnionToggle);
  } // Fl_Button* onionNextToggle
  { colorSelection = new Fl_Group(5, 555, 55, 40);
    colorSelection->box(FL_DOWN_BOX);
    { backColor = new Fl_Box(30, 570, 20, 20);
      backColor->box(FL_UP_BOX);
      backColor->color((Fl_Color)55);
    } // Fl_Box* backColor
    { foreColor = new Fl_Box(15, 560, 20, 20);
      foreColor->box(FL_UP_BOX);
      foreColor->color(FL_FOREGROUND_COLOR);
    } // Fl_Box* foreColor
    colorSelection->end();
  } // Fl_Group* colorSelection
  { onionRefToggle = new Fl_Button(636, 555, 27, 20);
    onionRefToggle->tooltip("Set current frame as reference frame.");
    onionRefToggle->type(1);
    onionRefToggle->image( image_onionskin_ref() );
    onionRefToggle->labelsize(12);
    onionRefToggle->callback((Fl_Callback*)cb_OnionRefToggle);
  } // Fl_Button* onionRefToggle
  o->end();
} // Fl_Group* o
xclass("flopnote.main");
end();
}
NewProjectUI::NewProjectUI(int X, int Y, int W, int H, const char *L)
  : Fl_Double_Window(X, Y, W, H, L) {
  _NewProjectUI();
}

NewProjectUI::NewProjectUI(int W, int H, const char *L)
  : Fl_Double_Window(0, 0, W, H, L) {
  clear_flag(16);
  _NewProjectUI();
}

NewProjectUI::NewProjectUI()
  : Fl_Double_Window(0, 0, 200, 130, "New Flopbook") {
  clear_flag(16);
  _NewProjectUI();
}

void NewProjectUI::_NewProjectUI() {
this->box(FL_FLAT_BOX);
this->color(FL_BACKGROUND_COLOR);
this->selection_color(FL_BACKGROUND_COLOR);
this->labeltype(FL_NO_LABEL);
this->labelfont(0);
this->labelsize(14);
this->labelcolor(FL_FOREGROUND_COLOR);
this->align(Fl_Align(FL_ALIGN_TOP));
this->when(FL_WHEN_RELEASE);
hotspot(this);
{ Fl_Group* o = new Fl_Group(10, 20, 180, 69, "Size");
  o->box(FL_ENGRAVED_BOX);
  o->labelsize(12);
  o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
  { projectXres = new Fl_Value_Input(60, 31, 120, 21, "Width");
    projectXres->labelsize(12);
    projectXres->maximum(0);
    projectXres->value(320);
    projectXres->textsize(12);
  } // Fl_Value_Input* projectXres
  { projectYres = new Fl_Value_Input(60, 57, 120, 21, "Height");
    projectYres->labelsize(12);
    projectYres->value(240);
    projectYres->textsize(12);
  } // Fl_Value_Input* projectYres
  o->end();
} // Fl_Group* o
{ Fl_Return_Button* o = new Fl_Return_Button(56, 94, 65, 24, "Okay");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_NewProject_Okay);
} // Fl_Return_Button* o
{ Fl_Button* o = new Fl_Button(126, 94, 64, 24, "Cancel");
  o->labelsize(12);
  o->callback((Fl_Callback*)cb_NewProject_Cancel);
} // Fl_Button* o
set_modal();
end();
}
