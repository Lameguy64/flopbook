// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef mainui_h
#define mainui_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
extern void cb_CloseCallback(Fl_Double_Window*, long);
#include <FL/Fl_Menu_Bar.H>
extern void cb_NewProject(Fl_Menu_*, void*);
extern void cb_OpenProject(Fl_Menu_*, void*);
extern void cb_SaveProject(Fl_Menu_*, long);
extern void cb_ExportGIF(Fl_Menu_*, void*);
extern void cb_CloseMenu(Fl_Menu_*, void*);
extern void cb_Undo(Fl_Menu_*, void*);
extern void cb_CopyFrame(Fl_Menu_*, void*);
extern void cb_PasteFrame(Fl_Menu_*, void*);
extern void cb_NewFrameMenu(Fl_Menu_*, void*);
extern void cb_DeleteFrameMenu(Fl_Menu_*, void*);
extern void cb_GotoFirst(Fl_Menu_*, void*);
extern void cb_GotoLast(Fl_Menu_*, void*);
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>
extern void cb_ToolButton(Fl_Button*, long);
#include <FL/Fl_Box.H>
extern void cb_Zoom(Fl_Button*, long);
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Counter.H>
extern void cb_FrameCounter(Fl_Counter*, void*);
extern void cb_NewFrame(Fl_Button*, void*);
extern void cb_DeleteFrame(Fl_Button*, void*);
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Value_Input.H>
extern void cb_PlayAnim(Fl_Button*, void*);
extern void cb_StopAnim(Fl_Button*, void*);
#include "Fl_ColorPalette.h"
extern void cb_PaletteBox(Fl_ColorPalette*, void*);
extern void cb_OnionToggle(Fl_Button*, void*);
extern void cb_OnionRefToggle(Fl_Button*, void*);

class MainUI : public Fl_Double_Window {
  void _MainUI();
public:
  MainUI(int X, int Y, int W, int H, const char *L = 0);
  MainUI(int W, int H, const char *L = 0);
  MainUI();
  static Fl_Menu_Item menu_[];
  Fl_Button *brushTool;
  Fl_Button *eraseTool;
  Fl_Button *fillTool;
  Fl_Button *zoomRadio[4];
  Fl_Spinner *brushSize;
  Fl_Button *brushShape[2];
  Fl_Button *patternInvert;
  Fl_Choice *patternChoice;
  static Fl_Menu_Item menu_patternChoice[];
  Fl_Scroll *canvasArea;
  Fl_Group *frameCtrlGroup;
  Fl_Counter *frameCounter;
  Fl_Round_Button *rateMode[2];
  Fl_Value_Input *rateValue;
  Fl_ColorPalette *paletteBox;
  Fl_Button *onionPrevToggle;
  Fl_Button *onionNextToggle;
  Fl_Group *colorSelection;
  Fl_Box *backColor;
  Fl_Box *foreColor;
  Fl_Button *onionRefToggle;
};
#include <FL/Fl_Return_Button.H>
extern void cb_NewProject_Okay(Fl_Return_Button*, void*);
extern void cb_NewProject_Cancel(Fl_Button*, void*);

class NewProjectUI : public Fl_Double_Window {
  void _NewProjectUI();
public:
  NewProjectUI(int X, int Y, int W, int H, const char *L = 0);
  NewProjectUI(int W, int H, const char *L = 0);
  NewProjectUI();
  Fl_Value_Input *projectXres;
  Fl_Value_Input *projectYres;
};
#endif
